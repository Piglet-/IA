-------------------------------------------------------------------------------
    Inteligencia Artificial CI-5437
    Proyecto 2
    Integrantes:
        * Chiseng Ng Yu               09-11245
        * María Lourdes Garcia Florez 10-10264
        * Carlos Ferreira             11-10323
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
	Informe
-------------------------------------------------------------------------------

--- Representación del Juego ---

    La representación del juego viene dado por 4 matrices donde cada una 
representa respectivamente las filas, colummnas, la diagonal principal 
(izquierda a derecha) y la diagonal secundaria(derecha a izquierda). 
Cada matriz contiene 32 elementos horizontales(filas) debido a que no contamos
las 4 piezas que ya estan colocadas al principio del juego, cada una de estas 
contiene 7 elementos verticales(columnas) debido a las 6 piezas que podrian 
estar en el tablero (6x6) y el último elemento significa que me salí del 
tablero representado con el -1. Cabe destacar que en las diagonales es posible 
salirse del tablero en otras posiciones que no sea la última.

--- Minmax/Maxmin ---

    Por los resultados, vemos que es el mas lento de los algoritmos, el cual, es 
el resultado esperado. Esto se debe a que recorre todos los nodos hasta llegar a 
la solución, comparando los valores dados, dependiendo de si el nodo es un nodo
máximo o mínimo, a traves de la evaluacion de dos funciones que se llaman
recursivamente, la una a la otra. De modo que por la presencia de esta evaluacion
doblemente recursiva se gasta mas tiempo de computo que en los demas algoritmos.

--- Versión Negamax de Minmax/Maxmin ---

    Un poco mejor que Minmax-Maxmin, pero no por mucho, lo cual es obvio en 
vista que es práctimante el mismo algoritmo solo que aprovechando la 
propiedad max{a,b} == -min{-a,-b}, se deja todo expresado en una sola función en 
vez de dos. Por lo que se mejora una poco el tiempo que tarda en conseguir el valor
del juego, al depender de la evalución de una sola funcion, aun si todavia se estan
recorriendo todos los nodos.

--- Versión Negamax de Minmax/Maxmin con poda alpha-beta ---

    La versión mejorada de negamax, este algoritmo consiste en tener dos valores,
uno máximo para el jugador Max(Negras) y uno mínimo para el jugador Min(blancas), que 
ira comparando los nodos que se van explorando, para lograr saber cuando se pueden 
podar ciertas ramas del árbol y asi explorar una cantidad menor de nodos. Por los 
resultados se ve que su mejora fue muy considerable comparado con los dos algoritmos 
anteriores. Esto se nota cuando analizamos los resultados arrojados, viendo que desde 
cierto nivel en este algoritmo, el numero de expandidos es menor que el presentado en 
los resultados de los algoritmos anteriores, por lo que se efectuan menos llamadas 
recursivas, mejorando asi el tiempo de computo requerido para encontrar el valor del
juego.

--- Scout --- (Revisar)

    Trata de reducir el camino buscado, viendo si los hijos pueden tener un
mejor valor que el que ya tienes, resultando en un podado mas grande que el 
algoritmo anterior. Esto se ve en el rendimiento del algoritmo que llego un 
piso mas abajo.

--- Negascout ---(Revisar)

    Al igual que la versión negamax con poda alpha-beta, guarda 2 valores, uno
para el máximo y otro para el mínimo, para comparar y asi podar pedazos aún más
grandes del árbol, dandonos, en tiempo, el mejor algoritmo de los realizdos.

-------------------------------------------------------------------------------
